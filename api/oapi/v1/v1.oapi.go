// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for MessageSend.
const (
	ONDEMAND MessageSend = "ON_DEMAND"
	RESERVED MessageSend = "RESERVED"
)

// Defines values for MessageService.
const (
	BUDDYSTOCK MessageService = "BUDDYSTOCK"
	DIJKSTRA   MessageService = "DIJKSTRA"
	PICKME     MessageService = "PICKME"
)

// Defines values for MessageViewType.
const (
	PLAIN MessageViewType = "PLAIN"
)

// a message
type Message struct {
	// for tracking who is send
	From *string `json:"from,omitempty"`

	// message identifier
	Id *string `json:"id,omitempty"`

	// actual push token by service
	PushToken *string `json:"push_token,omitempty"`

	// send type ON_DEMAND[send immediately] RESERVED send at scheduled]
	Send *MessageSend `json:"send,omitempty"`

	// one of service from pickstudio
	Service *MessageService `json:"service,omitempty"`

	// view object is actual push message format
	View *interface{} `json:"view,omitempty"`

	// view type of push message
	ViewType *MessageViewType `json:"view_type,omitempty"`
}

// send type ON_DEMAND[send immediately] RESERVED send at scheduled]
type MessageSend string

// one of service from pickstudio
type MessageService string

// view type of push message
type MessageViewType string

// plain type push message
type PlainView struct {
	Alarm   *string `json:"alarm,omitempty"`
	Content string  `json:"content"`
	Title   string  `json:"title"`
}

// Status defines model for status.
type Status struct {
	DeadQueueAdminUrl *string  `json:"dead_queue_admin_url,omitempty"`
	DeadQueueSize     *float32 `json:"dead_queue_size,omitempty"`
	Manual            *string  `json:"manual,omitempty"`
	QueueAdminUrl     *string  `json:"queue_admin_url,omitempty"`
	QueueSize         *float32 `json:"queue_size,omitempty"`
	Time              *string  `json:"time,omitempty"`
}

// PostPushJSONBody defines parameters for PostPush.
type PostPushJSONBody struct {
	Messages *[]Message `json:"messages,omitempty"`
}

// PostPushJSONRequestBody defines body for PostPush for application/json ContentType.
type PostPushJSONRequestBody PostPushJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostEnqueueFromDeadQueue request
	PostEnqueueFromDeadQueue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPush request with any body
	PostPushWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPush(ctx context.Context, body PostPushJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStatus request
	PostStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostEnqueueFromDeadQueue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnqueueFromDeadQueueRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPush(ctx context.Context, body PostPushJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostEnqueueFromDeadQueueRequest generates requests for PostEnqueueFromDeadQueue
func NewPostEnqueueFromDeadQueueRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/_enqueue_from_dead_queue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPushRequest calls the generic PostPush builder with application/json body
func NewPostPushRequest(server string, body PostPushJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPushRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPushRequestWithBody generates requests for PostPush with any type of body
func NewPostPushRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/_push")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStatusRequest generates requests for PostStatus
func NewPostStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/_status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostEnqueueFromDeadQueue request
	PostEnqueueFromDeadQueueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostEnqueueFromDeadQueueResponse, error)

	// PostPush request with any body
	PostPushWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPushResponse, error)

	PostPushWithResponse(ctx context.Context, body PostPushJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPushResponse, error)

	// PostStatus request
	PostStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostStatusResponse, error)
}

type PostEnqueueFromDeadQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostEnqueueFromDeadQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEnqueueFromDeadQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPushResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *Status `json:"_status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostPushResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPushResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostEnqueueFromDeadQueueWithResponse request returning *PostEnqueueFromDeadQueueResponse
func (c *ClientWithResponses) PostEnqueueFromDeadQueueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostEnqueueFromDeadQueueResponse, error) {
	rsp, err := c.PostEnqueueFromDeadQueue(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnqueueFromDeadQueueResponse(rsp)
}

// PostPushWithBodyWithResponse request with arbitrary body returning *PostPushResponse
func (c *ClientWithResponses) PostPushWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPushResponse, error) {
	rsp, err := c.PostPushWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushResponse(rsp)
}

func (c *ClientWithResponses) PostPushWithResponse(ctx context.Context, body PostPushJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPushResponse, error) {
	rsp, err := c.PostPush(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushResponse(rsp)
}

// PostStatusWithResponse request returning *PostStatusResponse
func (c *ClientWithResponses) PostStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostStatusResponse, error) {
	rsp, err := c.PostStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatusResponse(rsp)
}

// ParsePostEnqueueFromDeadQueueResponse parses an HTTP response from a PostEnqueueFromDeadQueueWithResponse call
func ParsePostEnqueueFromDeadQueueResponse(rsp *http.Response) (*PostEnqueueFromDeadQueueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEnqueueFromDeadQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPushResponse parses an HTTP response from a PostPushWithResponse call
func ParsePostPushResponse(rsp *http.Response) (*PostPushResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPushResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *Status `json:"_status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostStatusResponse parses an HTTP response from a PostStatusWithResponse call
func ParsePostStatusResponse(rsp *http.Response) (*PostStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// DLQ로 빠진 실패한 에러메세지들을 다시 queue에다가 집어 넣을 수 있도록 합니다.
	// (POST /_enqueue_from_dead_queue)
	PostEnqueueFromDeadQueue(w http.ResponseWriter, r *http.Request)
	// send push message immediately
	// (POST /_push)
	PostPush(w http.ResponseWriter, r *http.Request)
	// send push message immediately
	// (POST /_status)
	PostStatus(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostEnqueueFromDeadQueue operation middleware
func (siw *ServerInterfaceWrapper) PostEnqueueFromDeadQueue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEnqueueFromDeadQueue(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostPush operation middleware
func (siw *ServerInterfaceWrapper) PostPush(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPush(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostStatus operation middleware
func (siw *ServerInterfaceWrapper) PostStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/_enqueue_from_dead_queue", wrapper.PostEnqueueFromDeadQueue)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/_push", wrapper.PostPush)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/_status", wrapper.PostStatus)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RW3U4bRxR+ldG0l2t2bRJV2puWxFSl+YEEWqmNkDXsjvEkuzObmVmIG1kiqi9ITNVG",
	"gZRKkBLVFUXKBWlIRdU8ETt+h2pmbexll0KUKL0bzc853/nOd86Z+9BjYcQoplJA9z4UXgOHyCxDLARa",
	"xHrpY+FxEknCKHQhAoMjC0acRZhLgs2TOmdh/n6dcSA58u4QugiWGwwQAQSmPrQgx8ifpkETupLH2IKy",
	"GWHoQiE5oYuwZUHi5+31vQPiYypJnWAOLYjvoTAK9ONyZfxCaRn5olQZv1AvIb9+t6T3zuMuikWjJtkd",
	"TAvC9mSMAqCvAHMFLDSBwHyJePg8tk3IOat6F+i7YPp6rTp5beJ69ZbZI2GIfYIkDprz4Obk7OTNryer",
	"hjeAJNB58uMA+/M6dhqH0L0Fjy1ACw5ewPlRbkZvnANwGlsOM6MYsPogdqCzDiLi3REy9gkbAXTpq2r1",
	"m9m56ctXoAVnpi5fuTYJLVid+vLK7NzNCQ3tTBBLBC/nEehdwBZuY09qNY2mZqCOOuMhktDSaKfr0L11",
	"H37McR268CN7qHm7L3g7ChChNeOtdTqu1OUAVy3dLQRnUsrqGUwjzMxcnZi6ns1NunUmJS19425MOPa1",
	"IaLLyNRdX2HDvGXkPIq4z+p8QVgjNOTiMmdpYCeiynYBFCBu2kAumR6jElNZeCaJDHDByYl402tDU0VB",
	"CIlkbKBkgfkY+bW7MY5xDfkhobWYB3p/mIOGlJFwbZuiJczHPMPqmRIdMSvIdzhjseycaoDG4QLm2kCI",
	"aIxOIFHbB0cv94F6epA8/efozzWgnuwnj9bV7gpQG2tHr3ZU56+k0032Dj49D8b3H/W7BCxJmH0FK06l",
	"UnIulMqVOecT1xl3yxe/fetaMGYzyPKB59NlFeviOC15hWm/+J7EnKKgyjxRUCq6PqIASd2FwCKRjXgB",
	"WtAwf0x3uq35tofd09ZPS4OnZgTSOtMetOKRZ4oHh4hoS37TXw5EuVKuOM5ni3rTZM9o8lQ48LjWYMYX",
	"+GJubgZMzEzp/oC5SJ86Y85YWVtkEaYoItCF42PO2LiueiQbJna7hmlKn25EtSGdpgSZkHmCqldvJM+3",
	"QPL3jtptA9Xp9tb+6G1sAfXzT8mvL5K9ddU+VLsryZOu2m6DpNNVnS1gbOobne7R/gpQu4/V0wOQtH/T",
	"d9TqJlDPVpMf28nzbdDb2Es6q0mnOwYNdI604ylf91km5GSK93POwipG/g0DVotJRIyKtFtUHGdAe79n",
	"oSgKiGcs2bcFo8MPk17913TpdySjnCwRvc22evZCbW8C9f2D3i97Jtz1dfWo21tfS3ZW1bOHoLdxoLqn",
	"RmjKQMRhiHjzQzMr0aLQlaeFBOc1ELtm1qcm3nxgMoN65KNTmKsZbS8tdCzkJeY33yot2RHQd2rWROJQ",
	"nJW5wZBrHXcBxDlqGtIL2sKwHemG1XpHSWWx14Zz7Xxay6tNtV8evXqtdh6orTdGJT/sq+2DXns/+f0N",
	"ONpfUTuHavN1oa7OSlyRFEYG8XsSw2xq8X8p1Q9IXv/3jbkwH9csjoB5KADpeWaouLZtzhpMSPeiU3Yc",
	"G0XEXiqbL23fx0lrvceH6uELaEGKwsFMgK351r8BAAD//2HHkI4aDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for MessageDevice.
const (
	ANDROID       MessageDevice = "ANDROID"
	DESKTOPCHROME MessageDevice = "DESKTOP_CHROME"
	IOS           MessageDevice = "IOS"
)

// Defines values for MessageService.
const (
	BUDDYSTOCK MessageService = "BUDDYSTOCK"
	DIJKSTRA   MessageService = "DIJKSTRA"
	PICKME     MessageService = "PICKME"
)

// Defines values for MessageViewType.
const (
	PLAIN MessageViewType = "PLAIN"
)

// a message
type FailedMessage struct {
	// an error each message
	Error string `json:"error"`

	// a message
	Message Message `json:"message"`
}

// a message
type Message struct {
	// device type to receive push message
	Device MessageDevice `json:"device"`

	// for tracking who is send
	From string `json:"from"`

	// message identifier
	Id string `json:"id"`

	// actual push token by service
	PushToken string `json:"push_token"`

	// one of service from pickstudio
	Service MessageService `json:"service"`

	// message owner
	UserId string `json:"user_id"`

	// view object is actual push message format
	View interface{} `json:"view"`

	// view type of push message
	ViewType MessageViewType `json:"view_type"`
}

// device type to receive push message
type MessageDevice string

// one of service from pickstudio
type MessageService string

// view type of push message
type MessageViewType string

// plain type push message
type PlainView struct {
	Alarm        string `json:"alarm"`
	Content      string `json:"content"`
	CreatedAt    string `json:"created_at"`
	SchemeUrl    string `json:"scheme_url"`
	ThumbnailUrl string `json:"thumbnail_url"`
	Title        string `json:"title"`
}

// Status defines model for status.
type Status struct {
	DeadQueueAdminUrl string  `json:"dead_queue_admin_url"`
	DeadQueueSize     float32 `json:"dead_queue_size"`
	Manual            string  `json:"manual"`
	QueueAdminUrl     string  `json:"queue_admin_url"`
	QueueSize         float32 `json:"queue_size"`
	Time              string  `json:"time"`
}

// PostPushJSONBody defines parameters for PostPush.
type PostPushJSONBody struct {
	Messages *[]Message `json:"messages,omitempty"`
}

// PostPushJSONRequestBody defines body for PostPush for application/json ContentType.
type PostPushJSONRequestBody PostPushJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// DLQ로 빠진 실패한 에러메세지들을 다시 queue에다가 집어 넣을 수 있도록 합니다.
	// (POST /_enqueue_from_dead_queue)
	PostEnqueueFromDeadQueue(w http.ResponseWriter, r *http.Request)
	// send push message immediately
	// (POST /_push)
	PostPush(w http.ResponseWriter, r *http.Request)
	// send push message immediately
	// (POST /_status)
	PostStatus(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostEnqueueFromDeadQueue operation middleware
func (siw *ServerInterfaceWrapper) PostEnqueueFromDeadQueue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEnqueueFromDeadQueue(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostPush operation middleware
func (siw *ServerInterfaceWrapper) PostPush(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPush(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostStatus operation middleware
func (siw *ServerInterfaceWrapper) PostStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/_enqueue_from_dead_queue", wrapper.PostEnqueueFromDeadQueue)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/_push", wrapper.PostPush)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/_status", wrapper.PostStatus)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXX28UNxD/Kpbbx7vs3gVU6V7awKXiGiCBpA8tQitn15cz7NqL7U24opOCeg+BS9Ui",
	"EppKCQ3qVWkkHkIJFVX5RFnfd6jsvX97u4EgKvq28tgz8/vNb8bee9BlQcgoplLAyj0o3AYOkPmsI+Jj",
	"zwmwEGgF6xUPC5eTUBJGYQUiMDAVYMhZiLkk2JzEnDOec4ACYwEYuY2xw/guCkIfv2WHbIbaLCQndAW2",
	"CnAsqU85rsMK/MQaAbH6KKzBtlarADm+ExGOPVi5Acdim1RvDkOw5VvYlRMhzorbw6vEzTmRrAMdAkgG",
	"OHYxWcUgjESKBhoFOrna/CIswJmr1evztSoswOrs4tzS/IJz8dL1+SuzOtcRYcneDD11zoJsGnXGgeTI",
	"vU3oClhrMEAEEJh6eR6Ilz3fTxUQD1NJ6gTzVPFK5elzxTXkiWJ5+ly9iLz6naJey3OvoTuS3cY0h19X",
	"RshP2DFbwHITCMwNtzm+BqaMI0YxYPXBUaBJASFxbwsZeYSNMX7h62r1m8Wl+YtzsAAXahfnrsxq3mtf",
	"zS0uXZ8ZU8coaCQwd95GElujH8DPKsFrWd96FSQK1bUbJ2oQts54gCQsaPDzdVi58fYGCX1EqGOitfKa",
	"QFucZDU3GSNpVj9NyguXZ2pX04pNljKQJxqUaFEaFY/qOyK9MOi0lJDGs+0zmAdpDHIGk7EloCYQpRsd",
	"+YibBssUzmVUYirzbRwjiT0H5ZtNTbATcT/XLBtRsEwR8U/fQaSPcywT3CbbRqlOuk5lUuhjTWWfR6uQ",
	"SEaGnMmZiDznToQj7CAvIHSQ/UgRDSlDUbEsilYxn3JNzTPYxtwI8h1OeSjZwwM0CpYxN+Mb0QhNRFJ7",
	"xycvjoB6chw/+efkz02gHh/FD7fUwTpQ25snL/dV56+4040Pjz/Py+HDUbwPAEmC9C5Ytsvlon2uWCov",
	"2Z9V7OlK6fy37+wk4yYVOQskS28hv25DWrMK0HHxXYk5RX6VuSKnuXRHhT6SekaBFSIb0bJuas3kkL5k",
	"WfNnjUa1pY8WB0fN9UTrTEfQGkau6SccIKI9eU1vzRelcqls21+s6EVTDaOhU9OBw+6BqVjg0tLSAphZ",
	"qOmJgrlIjtpT9lRJe2QhpigksAKnp+ypaT0nkGwY7JaDaUKfHmPOiE7TIkzILEHVy9fiZ7sg/ntfHbSB",
	"6nR7m3/0tneB+vmn+Nfn8eGWar9WB+vx467aa4O401WdXWB86h2d7snROlAHj9STYxC3f9N71MYOUE83",
	"4h/b8bM90Ns+jDsbcac7BU3qHOnANU9PZSbkbJLvl5wFVYy8ayZZLSYRMiqSbi7b9oD2/pRDYegT13iy",
	"bglGR4/Idz3O+hPDKCdNRG+nrZ4+V3s7QH1/v/fLoYG7taUedntbm/H+hnr6APS2j1X3VISmDUQUBIg3",
	"PzazEq0I3XlaSPCmTsRyzPephdePsPQ1ToIAewRJ7Ddza7Wg/SWNjoW8wLzme5UlPaL7Qc03kTgQZ35W",
	"D6cA4hw1Dek5Y2E0jiSPcOsDJZXO3RndO2fRWmHir+bsmCf+hrLQc3Ss2i9OXr5S+/fV7hujvx+O1N5x",
	"r30U//4GnBytq/3XaudVrmLfJYk8kY1dwf+RzBYTj//LEPiI5PV/IjAX5sGczsNnLvJBYk9dVxXLMrYG",
	"E7Jy3i7ZtoVCYq2Wkqd0EmPSW+/Ra/XgOSxAioLBbQNbN1v/BgAA//9M6Pl9iA8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
